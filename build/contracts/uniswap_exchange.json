{
  "contractName": "uniswap_exchange",
  "abi": [
    {
      "name": "TokenPurchase",
      "inputs": [
        {
          "type": "address",
          "name": "buyer",
          "indexed": true
        },
        {
          "type": "uint256",
          "name": "eth_sold",
          "indexed": true,
          "unit": "wei"
        },
        {
          "type": "uint256",
          "name": "tokens_bought",
          "indexed": true
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "EthPurchase",
      "inputs": [
        {
          "type": "address",
          "name": "buyer",
          "indexed": true
        },
        {
          "type": "uint256",
          "name": "tokens_sold",
          "indexed": true
        },
        {
          "type": "uint256",
          "name": "eth_bought",
          "indexed": true,
          "unit": "wei"
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "AddLiquidity",
      "inputs": [
        {
          "type": "address",
          "name": "provider",
          "indexed": true
        },
        {
          "type": "uint256",
          "name": "eth_amount",
          "indexed": true,
          "unit": "wei"
        },
        {
          "type": "uint256",
          "name": "token_amount",
          "indexed": true
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "RemoveLiquidity",
      "inputs": [
        {
          "type": "address",
          "name": "provider",
          "indexed": true
        },
        {
          "type": "uint256",
          "name": "eth_amount",
          "indexed": true,
          "unit": "wei"
        },
        {
          "type": "uint256",
          "name": "token_amount",
          "indexed": true
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "Transfer",
      "inputs": [
        {
          "type": "address",
          "name": "_from",
          "indexed": true
        },
        {
          "type": "address",
          "name": "_to",
          "indexed": true
        },
        {
          "type": "uint256",
          "name": "_value",
          "indexed": false
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "Approval",
      "inputs": [
        {
          "type": "address",
          "name": "_owner",
          "indexed": true
        },
        {
          "type": "address",
          "name": "_spender",
          "indexed": true
        },
        {
          "type": "uint256",
          "name": "_value",
          "indexed": false
        }
      ],
      "anonymous": false,
      "type": "event"
    },
    {
      "name": "setup",
      "outputs": [],
      "inputs": [
        {
          "type": "address",
          "name": "token_addr"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 248235
    },
    {
      "name": "tokenAddress",
      "outputs": [
        {
          "type": "address",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1181
    },
    {
      "name": "factoryAddress",
      "outputs": [
        {
          "type": "address",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 1211
    },
    {
      "name": "addLiquidity",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "min_liquidity"
        },
        {
          "type": "uint256",
          "name": "max_tokens"
        },
        {
          "type": "uint256",
          "unit": "sec",
          "name": "deadline"
        }
      ],
      "constant": false,
      "payable": true,
      "type": "function",
      "gas": 161927
    },
    {
      "name": "removeLiquidity",
      "outputs": [
        {
          "type": "uint256",
          "unit": "wei",
          "name": "out"
        },
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "amount"
        },
        {
          "type": "uint256",
          "unit": "wei",
          "name": "min_eth"
        },
        {
          "type": "uint256",
          "name": "min_tokens"
        },
        {
          "type": "uint256",
          "unit": "sec",
          "name": "deadline"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 196409
    },
    {
      "constant": false,
      "payable": true,
      "type": "fallback"
    },
    {
      "name": "ethToTokenSwapInput",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "min_tokens"
        },
        {
          "type": "uint256",
          "unit": "sec",
          "name": "deadline"
        }
      ],
      "constant": false,
      "payable": true,
      "type": "function",
      "gas": 91154
    },
    {
      "name": "ethToTokenTransferInput",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "min_tokens"
        },
        {
          "type": "uint256",
          "unit": "sec",
          "name": "deadline"
        },
        {
          "type": "address",
          "name": "recipient"
        }
      ],
      "constant": false,
      "payable": true,
      "type": "function",
      "gas": 91344
    },
    {
      "name": "ethToTokenSwapOutput",
      "outputs": [
        {
          "type": "uint256",
          "unit": "wei",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "tokens_bought"
        },
        {
          "type": "uint256",
          "unit": "sec",
          "name": "deadline"
        }
      ],
      "constant": false,
      "payable": true,
      "type": "function",
      "gas": 126764
    },
    {
      "name": "ethToTokenTransferOutput",
      "outputs": [
        {
          "type": "uint256",
          "unit": "wei",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "tokens_bought"
        },
        {
          "type": "uint256",
          "unit": "sec",
          "name": "deadline"
        },
        {
          "type": "address",
          "name": "recipient"
        }
      ],
      "constant": false,
      "payable": true,
      "type": "function",
      "gas": 126954
    },
    {
      "name": "tokenToEthSwapInput",
      "outputs": [
        {
          "type": "uint256",
          "unit": "wei",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "tokens_sold"
        },
        {
          "type": "uint256",
          "unit": "wei",
          "name": "min_eth"
        },
        {
          "type": "uint256",
          "unit": "sec",
          "name": "deadline"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 126255
    },
    {
      "name": "tokenToEthTransferInput",
      "outputs": [
        {
          "type": "uint256",
          "unit": "wei",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "tokens_sold"
        },
        {
          "type": "uint256",
          "unit": "wei",
          "name": "min_eth"
        },
        {
          "type": "uint256",
          "unit": "sec",
          "name": "deadline"
        },
        {
          "type": "address",
          "name": "recipient"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 126445
    },
    {
      "name": "tokenToEthSwapOutput",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "unit": "wei",
          "name": "eth_bought"
        },
        {
          "type": "uint256",
          "name": "max_tokens"
        },
        {
          "type": "uint256",
          "unit": "sec",
          "name": "deadline"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 126821
    },
    {
      "name": "tokenToEthTransferOutput",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "unit": "wei",
          "name": "eth_bought"
        },
        {
          "type": "uint256",
          "name": "max_tokens"
        },
        {
          "type": "uint256",
          "unit": "sec",
          "name": "deadline"
        },
        {
          "type": "address",
          "name": "recipient"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 127011
    },
    {
      "name": "tokenToTokenSwapInput",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "tokens_sold"
        },
        {
          "type": "uint256",
          "name": "min_tokens_bought"
        },
        {
          "type": "uint256",
          "unit": "wei",
          "name": "min_eth_bought"
        },
        {
          "type": "uint256",
          "unit": "sec",
          "name": "deadline"
        },
        {
          "type": "address",
          "name": "token_addr"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 131498
    },
    {
      "name": "tokenToTokenTransferInput",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "tokens_sold"
        },
        {
          "type": "uint256",
          "name": "min_tokens_bought"
        },
        {
          "type": "uint256",
          "unit": "wei",
          "name": "min_eth_bought"
        },
        {
          "type": "uint256",
          "unit": "sec",
          "name": "deadline"
        },
        {
          "type": "address",
          "name": "recipient"
        },
        {
          "type": "address",
          "name": "token_addr"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 131571
    },
    {
      "name": "tokenToTokenSwapOutput",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "tokens_bought"
        },
        {
          "type": "uint256",
          "name": "max_tokens_sold"
        },
        {
          "type": "uint256",
          "unit": "wei",
          "name": "max_eth_sold"
        },
        {
          "type": "uint256",
          "unit": "sec",
          "name": "deadline"
        },
        {
          "type": "address",
          "name": "token_addr"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 133241
    },
    {
      "name": "tokenToTokenTransferOutput",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "tokens_bought"
        },
        {
          "type": "uint256",
          "name": "max_tokens_sold"
        },
        {
          "type": "uint256",
          "unit": "wei",
          "name": "max_eth_sold"
        },
        {
          "type": "uint256",
          "unit": "sec",
          "name": "deadline"
        },
        {
          "type": "address",
          "name": "recipient"
        },
        {
          "type": "address",
          "name": "token_addr"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 133314
    },
    {
      "name": "tokenToExchangeSwapInput",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "tokens_sold"
        },
        {
          "type": "uint256",
          "name": "min_tokens_bought"
        },
        {
          "type": "uint256",
          "unit": "wei",
          "name": "min_eth_bought"
        },
        {
          "type": "uint256",
          "unit": "sec",
          "name": "deadline"
        },
        {
          "type": "address",
          "name": "exchange_addr"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 128033
    },
    {
      "name": "tokenToExchangeTransferInput",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "tokens_sold"
        },
        {
          "type": "uint256",
          "name": "min_tokens_bought"
        },
        {
          "type": "uint256",
          "unit": "wei",
          "name": "min_eth_bought"
        },
        {
          "type": "uint256",
          "unit": "sec",
          "name": "deadline"
        },
        {
          "type": "address",
          "name": "recipient"
        },
        {
          "type": "address",
          "name": "exchange_addr"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 128202
    },
    {
      "name": "tokenToExchangeSwapOutput",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "tokens_bought"
        },
        {
          "type": "uint256",
          "name": "max_tokens_sold"
        },
        {
          "type": "uint256",
          "unit": "wei",
          "name": "max_eth_sold"
        },
        {
          "type": "uint256",
          "unit": "sec",
          "name": "deadline"
        },
        {
          "type": "address",
          "name": "exchange_addr"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 129746
    },
    {
      "name": "tokenToExchangeTransferOutput",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "tokens_bought"
        },
        {
          "type": "uint256",
          "name": "max_tokens_sold"
        },
        {
          "type": "uint256",
          "unit": "wei",
          "name": "max_eth_sold"
        },
        {
          "type": "uint256",
          "unit": "sec",
          "name": "deadline"
        },
        {
          "type": "address",
          "name": "recipient"
        },
        {
          "type": "address",
          "name": "exchange_addr"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 129915
    },
    {
      "name": "getEthToTokenInputPrice",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "unit": "wei",
          "name": "eth_sold"
        }
      ],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 6751
    },
    {
      "name": "getEthToTokenOutputPrice",
      "outputs": [
        {
          "type": "uint256",
          "unit": "wei",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "tokens_bought"
        }
      ],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 7028
    },
    {
      "name": "getTokenToEthInputPrice",
      "outputs": [
        {
          "type": "uint256",
          "unit": "wei",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "name": "tokens_sold"
        }
      ],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 6846
    },
    {
      "name": "getTokenToEthOutputPrice",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "uint256",
          "unit": "wei",
          "name": "eth_bought"
        }
      ],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 7053
    },
    {
      "name": "transfer",
      "outputs": [
        {
          "type": "bool",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "_to"
        },
        {
          "type": "uint256",
          "name": "_value"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 75702
    },
    {
      "name": "transferFrom",
      "outputs": [
        {
          "type": "bool",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "_from"
        },
        {
          "type": "address",
          "name": "_to"
        },
        {
          "type": "uint256",
          "name": "_value"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 112057
    },
    {
      "name": "approve",
      "outputs": [
        {
          "type": "bool",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "_spender"
        },
        {
          "type": "uint256",
          "name": "_value"
        }
      ],
      "constant": false,
      "payable": false,
      "type": "function",
      "gas": 38783
    },
    {
      "name": "name",
      "outputs": [
        {
          "type": "string",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 7656
    },
    {
      "name": "symbol",
      "outputs": [
        {
          "type": "string",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 7686
    },
    {
      "name": "decimals",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 2291
    },
    {
      "name": "totalSupply",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 2321
    },
    {
      "name": "balanceOf",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "arg0"
        }
      ],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 2505
    },
    {
      "name": "allowance",
      "outputs": [
        {
          "type": "uint256",
          "name": "out"
        }
      ],
      "inputs": [
        {
          "type": "address",
          "name": "arg0"
        },
        {
          "type": "address",
          "name": "arg1"
        }
      ],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 2689
    },
    {
      "name": "token",
      "outputs": [
        {
          "type": "address",
          "unit": "Token",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 2411
    },
    {
      "name": "factory",
      "outputs": [
        {
          "type": "address",
          "unit": "Factory",
          "name": "out"
        }
      ],
      "inputs": [],
      "constant": true,
      "payable": false,
      "type": "function",
      "gas": 2441
    }
  ],
  "bytecode": "0x612daa56600436101561000d57612d5d565b600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a0526366d3820360005114156102015734156100ba57600080fd5b60043560205181106100cb57600080fd5b5060006004351415600654156007541516166100e657600080fd5b33600755600435600655600a610140527f556e6973776170205632000000000000000000000000000000000000000000006101605261014080600060c052602060c020602082510161012060006002818352015b8261012051602002111561014d5761016f565b61012051602002850151610120518501555b815160010180835281141561013a575b50505050505060066101a0527f554e492d563200000000000000000000000000000000000000000000000000006101c0526101a080600160c052602060c020602082510161012060006002818352015b826101205160200211156101d2576101f4565b61012051602002850151610120518501555b81516001018083528114156101bf575b5050505050506012600255005b639d76ea58600051141561022857341561021a57600080fd5b60065460005260206000f350005b63966dae0e600051141561024f57341561024157600080fd5b60075460005260206000f350005b63422f104360005114156106695762ffffff541561026c57600080fd5b600162ffffff5560003411600060243511164260443510151661028e57600080fd5b6003546101405260006101405111156104e9576000600435116102b057600080fd5b4734808210156102bf57600080fd5b80820390509050610360526006543b6102d757600080fd5b60065430186102e557600080fd5b602061042060246370a082316103a052306103c0526103bc6006545afa61030b57600080fd5b60005061042051610380523461038051808202821582848304141761032f57600080fd5b8090509050905061036051808061034557600080fd5b820490509050600181818301101561035c57600080fd5b80820190509050610440523461014051808202821582848304141761038057600080fd5b8090509050905061036051808061039657600080fd5b82049050905061046052600435610460511015610440516024351015166103bc57600080fd5b60043360e05260c052604060c0208054610460518181830110156103df57600080fd5b80820190509050815550610140516104605181818301101561040057600080fd5b808201905090506003556006543b61041757600080fd5b600654301861042557600080fd5b602061056060646323b872dd6104a052336104c052306104e05261044051610500526104bc60006006545af161045a57600080fd5b60005061056051610480526104805161047257600080fd5b6104405134337f06239653922ac7bea6aa2b19dc486b9361821d37712eb796adfd38d81de278ca60006000a461046051610580523360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610580a361046051600052600062ffffff5560206000f350610660565b633b9aca003410156000600654141560006007541415161661050a57600080fd5b306007543b61051857600080fd5b600754301861052657600080fd5b60206101e060246306f2bf62610160526006546101805261017c6007545afa61054e57600080fd5b6000506101e0511461055f57600080fd5b602435610200524761022052610220516003556102205160043360e05260c052604060c020556006543b61059257600080fd5b60065430186105a057600080fd5b602061032060646323b872dd610260523361028052306102a052610200516102c05261027c60006006545af16105d557600080fd5b6000506103205161024052610240516105ed57600080fd5b6102005134337f06239653922ac7bea6aa2b19dc486b9361821d37712eb796adfd38d81de278ca60006000a461022051610340523360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610340a361022051600052600062ffffff5560206000f3505b600062ffffff55005b63f88bf15a60005114156109115762ffffff541561068657600080fd5b600162ffffff55341561069857600080fd5b6000604435116000602435111642606435101560006004351116166106bc57600080fd5b60035461014052600061014051116106d357600080fd5b6006543b6106e057600080fd5b60065430186106ee57600080fd5b602061020060246370a0823161018052306101a05261019c6006545afa61071457600080fd5b600050610200516101605260043547808202821582848304141761073757600080fd5b8090509050905061014051808061074d57600080fd5b8204905090506102205260043561016051808202821582848304141761077257600080fd5b8090509050905061014051808061078857600080fd5b82049050905061024052604435610240511015602435610220511015166107ae57600080fd5b60043360e05260c052604060c0208054600435808210156107ce57600080fd5b8082039050905081555061014051600435808210156107ec57600080fd5b80820390509050600355600060006000600061022051336000f161080f57600080fd5b6006543b61081c57600080fd5b600654301861082a57600080fd5b6020610320604463a9059cbb61028052336102a052610240516102c05261029c60006006545af161085a57600080fd5b60005061032051610260526102605161087257600080fd5b6102405161022051337f0fbf06c058b90cb038a618f8c2acbf6145f8b3570fd1fa56abb8f0f3f05b36e860006000a4600435610340526000337fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610340a361036080808061022051815250506020810190508080610240518152505060409050905060c052600062ffffff5560c051610360f350600062ffffff55005b6000156109f5575b6101a05261014052610160526101805260006101805111600061016051111661094157600080fd5b610140516103e5808202821582848304141761095c57600080fd5b809050905090506101c0526101c05161018051808202821582848304141761098357600080fd5b809050905090506101e052610160516103e880820282158284830414176109a957600080fd5b809050905090506101c0518181830110156109c357600080fd5b80820190509050610200526101e0516102005180806109e157600080fd5b8204905090506000526000516101a0515650005b600015610ae7575b6101a052610140526101605261018052600061018051116000610160511116610a2557600080fd5b61016051610140518082028215828483041417610a4157600080fd5b809050905090506103e88082028215828483041417610a5f57600080fd5b809050905090506101c052610180516101405180821015610a7f57600080fd5b808203905090506103e58082028215828483041417610a9d57600080fd5b809050905090506101e0526101c0516101e0518080610abb57600080fd5b8204905090506001818183011015610ad257600080fd5b808201905090506000526000516101a0515650005b600015610d00575b62ffffff5415610afe57600080fd5b600162ffffff556101e0526101405261016052610180526101a0526101c0526000610160511160006101405111164261018051101516610b3d57600080fd5b6006543b610b4a57600080fd5b6006543018610b5857600080fd5b60206102a060246370a0823161022052306102405261023c6006545afa610b7e57600080fd5b6000506102a051610200526101406102e0525b6102e0515160206102e051016102e0526102e06102e0511015610bb357610b91565b6389f2a871610300526101405161032052476101405180821015610bd657600080fd5b8082039050905061034052610200516103605261036051610340516103205160065801610919565b6103c0526102c06102e0525b6102e0515260206102e051036102e0526101406102e051101515610c2d57610c0a565b6103c0516102c052610160516102c0511015610c4857600080fd5b6006543b610c5557600080fd5b6006543018610c6357600080fd5b60206104a0604463a9059cbb610400526101c051610420526102c0516104405261041c60006006545af1610c9657600080fd5b6000506104a0516103e0526103e051610cae57600080fd5b6102c051610140516101a0517fcd60aa75dea3072fbc07ae6d7d856b5dc5f4eee88854f5b4abf7b680ef8bc50f60006000a46102c051600052600051600062ffffff556101e0515650600062ffffff55005b63f39b5b9b6000511415610d6457638c717a33610140523461016052600435610180526024356101a052336101c052336101e0526101e0516101c0516101a051610180516101605160065801610aef565b610240526102405160005260206000f350005b63ad65d76d6000511415610df3576044356020518110610d8357600080fd5b506000604435141530604435141516610d9b57600080fd5b638c717a33610140523461016052600435610180526024356101a052336101c0526044356101e0526101e0516101c0516101a051610180516101605160065801610aef565b610240526102405160005260206000f350005b60001561104b575b62ffffff5415610e0a57600080fd5b600162ffffff556101e0526101405261016052610180526101a0526101c0526000610160511160006101405111164261018051101516610e4957600080fd5b6006543b610e5657600080fd5b6006543018610e6457600080fd5b60206102a060246370a0823161022052306102405261023c6006545afa610e8a57600080fd5b6000506102a051610200526101406102e0525b6102e0515160206102e051016102e0526102e06102e0511015610ebf57610e9d565b63fd11c223610300526101405161032052476101605180821015610ee257600080fd5b80820390509050610340526102005161036052610360516103405161032051600658016109fd565b6103c0526102c06102e0525b6102e0515260206102e051036102e0526101406102e051101515610f3957610f16565b6103c0516102c0526101605160016102c0510280821015610f5957600080fd5b808203905090506103e05260006103e0511115610f8d5760006000600060006103e0516101a0516000f1610f8c57600080fd5b5b6006543b610f9a57600080fd5b6006543018610fa857600080fd5b60206104c0604463a9059cbb610420526101c05161044052610140516104605261043c60006006545af1610fdb57600080fd5b6000506104c0516104005261040051610ff357600080fd5b6101405160016102c051026101a0517fcd60aa75dea3072fbc07ae6d7d856b5dc5f4eee88854f5b4abf7b680ef8bc50f60006000a460016102c05102600052600051600062ffffff556101e0515650600062ffffff55005b636b1d4db760005114156110af57632dff394e610140526004356101605234610180526024356101a052336101c052336101e0526101e0516101c0516101a051610180516101605160065801610dfb565b610240526102405160005260206000f350005b630b573638600051141561113e5760443560205181106110ce57600080fd5b5060006044351415306044351415166110e657600080fd5b632dff394e610140526004356101605234610180526024356101a052336101c0526044356101e0526101e0516101c0516101a051610180516101605160065801610dfb565b610240526102405160005260206000f350005b60001561136b575b62ffffff541561115557600080fd5b600162ffffff556101e0526101405261016052610180526101a0526101c052600061016051116000610140511116426101805110151661119457600080fd5b6006543b6111a157600080fd5b60065430186111af57600080fd5b60206102a060246370a0823161022052306102405261023c6006545afa6111d557600080fd5b6000506102a051610200526101406102e0525b6102e0515160206102e051016102e0526102e06102e051101561120a576111e8565b6389f2a8716103005261014051610320526102005161034052476103605261036051610340516103205160065801610919565b6103c0526102c06102e0525b6102e0515260206102e051036102e0526101406102e05110151561126c57611249565b6103c0516102c05260016102c051026103e052610160516103e051101561129257600080fd5b60006000600060006103e0516101c0516000f16112ae57600080fd5b6006543b6112bb57600080fd5b60065430186112c957600080fd5b60206104e060646323b872dd610420526101a051610440523061046052610140516104805261043c60006006545af161130157600080fd5b6000506104e051610400526104005161131957600080fd5b6103e051610140516101a0517f7f4091b46c33e918a0f3aa42307641d17bb67029427a5369e54b35398423870560006000a46103e051600052600051600062ffffff556101e0515650600062ffffff55005b6395e3c50b60005114156113dc57341561138457600080fd5b63fa1bb7be6101405260043561016052602435610180526044356101a052336101c052336101e0526101e0516101c0516101a051610180516101605160065801611146565b610240526102405160005260206000f350005b637237e03160005114156114785734156113f557600080fd5b606435602051811061140657600080fd5b50600060643514153060643514151661141e57600080fd5b63fa1bb7be6101405260043561016052602435610180526044356101a052336101c0526064356101e0526101e0516101c0516101a051610180516101605160065801611146565b610240526102405160005260206000f350005b600015611692575b62ffffff541561148f57600080fd5b600162ffffff556101e0526101405261016052610180526101a0526101c0526000610140511142610180511015166114c657600080fd5b6006543b6114d357600080fd5b60065430186114e157600080fd5b60206102a060246370a0823161022052306102405261023c6006545afa61150757600080fd5b6000506102a051610200526101406102e0525b6102e0515160206102e051016102e0526102e06102e051101561153c5761151a565b63fd11c22361030052610140516103205261020051610340524761036052610360516103405161032051600658016109fd565b6103c0526102c06102e0525b6102e0515260206102e051036102e0526101406102e05110151561159e5761157b565b6103c0516102c0526102c0516101605110156115b957600080fd5b6000600060006000610140516101c0516000f16115d557600080fd5b6006543b6115e257600080fd5b60065430186115f057600080fd5b60206104c060646323b872dd610400526101a0516104205230610440526102c0516104605261041c60006006545af161162857600080fd5b6000506104c0516103e0526103e05161164057600080fd5b610140516102c0516101a0517f7f4091b46c33e918a0f3aa42307641d17bb67029427a5369e54b35398423870560006000a46102c051600052600051600062ffffff556101e0515650600062ffffff55005b63013efd8b60005114156117035734156116ab57600080fd5b63984fe8f66101405260043561016052602435610180526044356101a052336101c052336101e0526101e0516101c0516101a051610180516101605160065801611480565b610240526102405160005260206000f350005b63d4e4841d600051141561179f57341561171c57600080fd5b606435602051811061172d57600080fd5b50600060643514153060643514151661174557600080fd5b63984fe8f66101405260043561016052602435610180526044356101a052336101c0526064356101e0526101e0516101c0516101a051610180516101605160065801611480565b610240526102405160005260206000f350005b600015611a3f575b62ffffff54156117b657600080fd5b600162ffffff55610220526101405261016052610180526101a0526101c0526101e0526102005260006101805111600061016051111660006101405111426101a0511015161661180557600080fd5b6000610200511415306102005114151661181e57600080fd5b6006543b61182b57600080fd5b600654301861183957600080fd5b60206102e060246370a0823161026052306102805261027c6006545afa61185f57600080fd5b6000506102e05161024052610140610320525b6103205151602061032051016103205261032061032051101561189457611872565b6389f2a8716103405261014051610360526102405161038052476103a0526103a051610380516103605160065801610919565b61040052610300610320525b61032051526020610320510361032052610140610320511015156118f6576118d3565b610400516103005260016103005102610420526101805161042051101561191c57600080fd5b6006543b61192957600080fd5b600654301861193757600080fd5b602061052060646323b872dd610460526101c05161048052306104a052610140516104c05261047c60006006545af161196f57600080fd5b60005061052051610440526104405161198757600080fd5b610200513b61199557600080fd5b6102005130186119a457600080fd5b6020610620606463ad65d76d6105605261016051610580526101a0516105a0526101e0516105c05261057c61042051610200515af16119e257600080fd5b600050610620516105405261042051610140516101c0517f7f4091b46c33e918a0f3aa42307641d17bb67029427a5369e54b35398423870560006000a461054051600052600051600062ffffff55610220515650600062ffffff55005b63ddf7e1a76000511415611b57573415611a5857600080fd5b6084356020518110611a6957600080fd5b506007543b611a7757600080fd5b6007543018611a8557600080fd5b60206101e060246306f2bf62610160526084356101805261017c6007545afa611aad57600080fd5b6000506101e051610140526101405161016051610180516101a0516101c0516101e05163204ea33b610220526004356102405260243561026052604435610280526064356102a052336102c052336102e0526101405161030052610300516102e0516102c0516102a051610280516102605161024051600658016117a7565b610360526101e0526101c0526101a0526101805261016052610140526103605160005260206000f350005b63f552d91b6000511415611c83573415611b7057600080fd5b6084356020518110611b8157600080fd5b5060a4356020518110611b9357600080fd5b506007543b611ba157600080fd5b6007543018611baf57600080fd5b60206101e060246306f2bf626101605260a4356101805261017c6007545afa611bd757600080fd5b6000506101e051610140526101405161016051610180516101a0516101c0516101e05163204ea33b610220526004356102405260243561026052604435610280526064356102a052336102c0526084356102e0526101405161030052610300516102e0516102c0516102a051610280516102605161024051600658016117a7565b610360526101e0526101c0526101a0526101805261016052610140526103605160005260206000f350005b600015611f6d575b62ffffff5415611c9a57600080fd5b600162ffffff55610220526101405261016052610180526101a0526101c0526101e05261020052600061018051116000610140511116426101a051101516611ce157600080fd5b60006102005114153061020051141516611cfa57600080fd5b610200513b611d0857600080fd5b610200513018611d1757600080fd5b60206102e060246359e9486261026052610140516102805261027c610200515afa611d4157600080fd5b6000506102e051610240526006543b611d5957600080fd5b6006543018611d6757600080fd5b60206103a060246370a0823161032052306103405261033c6006545afa611d8d57600080fd5b6000506103a051610300526101406103e0525b6103e0515160206103e051016103e0526103e06103e0511015611dc257611da0565b63fd11c22361040052610240516104205261030051610440524761046052610460516104405161042051600658016109fd565b6104c0526103c06103e0525b6103e0515260206103e051036103e0526101406103e051101515611e2457611e01565b6104c0516103c052610240516101805110156103c05161016051101516611e4a57600080fd5b6006543b611e5757600080fd5b6006543018611e6557600080fd5b60206105c060646323b872dd610500526101c0516105205230610540526103c0516105605261051c60006006545af1611e9d57600080fd5b6000506105c0516104e0526104e051611eb557600080fd5b610200513b611ec357600080fd5b610200513018611ed257600080fd5b60206106c06064630b5736386106005261014051610620526101a051610640526101e0516106605261061c61024051610200515af1611f1057600080fd5b6000506106c0516105e052610240516103c0516101c0517f7f4091b46c33e918a0f3aa42307641d17bb67029427a5369e54b35398423870560006000a46103c051600052600051600062ffffff55610220515650600062ffffff55005b63b040d5456000511415612085573415611f8657600080fd5b6084356020518110611f9757600080fd5b506007543b611fa557600080fd5b6007543018611fb357600080fd5b60206101e060246306f2bf62610160526084356101805261017c6007545afa611fdb57600080fd5b6000506101e051610140526101405161016051610180516101a0516101c0516101e051631a7b28f2610220526004356102405260243561026052604435610280526064356102a052336102c052336102e0526101405161030052610300516102e0516102c0516102a05161028051610260516102405160065801611c8b565b610360526101e0526101c0526101a0526101805261016052610140526103605160005260206000f350005b63f3c0efe960005114156121b157341561209e57600080fd5b60843560205181106120af57600080fd5b5060a43560205181106120c157600080fd5b506007543b6120cf57600080fd5b60075430186120dd57600080fd5b60206101e060246306f2bf626101605260a4356101805261017c6007545afa61210557600080fd5b6000506101e051610140526101405161016051610180516101a0516101c0516101e051631a7b28f2610220526004356102405260243561026052604435610280526064356102a052336102c0526084356102e0526101405161030052610300516102e0516102c0516102a05161028051610260516102405160065801611c8b565b610360526101e0526101c0526101a0526101805261016052610140526103605160005260206000f350005b63b1cb43bf600051141561224a5734156121ca57600080fd5b60843560205181106121db57600080fd5b5063204ea33b6101405260043561016052602435610180526044356101a0526064356101c052336101e05233610200526084356102205261022051610200516101e0516101c0516101a0516101805161016051600658016117a7565b610280526102805160005260206000f350005b63ec384a3e600051141561230557341561226357600080fd5b608435602051811061227457600080fd5b5060a435602051811061228657600080fd5b50306084351861229557600080fd5b63204ea33b6101405260043561016052602435610180526044356101a0526064356101c052336101e0526084356102005260a4356102205261022051610200516101e0516101c0516101a0516101805161016051600658016117a7565b610280526102805160005260206000f350005b63ea650c7d600051141561239e57341561231e57600080fd5b608435602051811061232f57600080fd5b50631a7b28f26101405260043561016052602435610180526044356101a0526064356101c052336101e05233610200526084356102205261022051610200516101e0516101c0516101a051610180516101605160065801611c8b565b610280526102805160005260206000f350005b63981a132760005114156124595734156123b757600080fd5b60843560205181106123c857600080fd5b5060a43560205181106123da57600080fd5b5030608435186123e957600080fd5b631a7b28f26101405260043561016052602435610180526044356101a0526064356101c052336101e0526084356102005260a4356102205261022051610200516101e0516101c0516101a051610180516101605160065801611c8b565b610280526102805160005260206000f350005b63cd7724c3600051141561254257341561247257600080fd5b60006004351161248157600080fd5b6006543b61248e57600080fd5b600654301861249c57600080fd5b60206101e060246370a0823161016052306101805261017c6006545afa6124c257600080fd5b6000506101e051610140526101405161016051610180516101a0516101c0516101e0516389f2a87161022052600435610240524761026052610140516102805261028051610260516102405160065801610919565b6102e0526101e0526101c0526101a0526101805261016052610140526102e05160005260206000f350005b6359e94862600051141561263e57341561255b57600080fd5b60006004351161256a57600080fd5b6006543b61257757600080fd5b600654301861258557600080fd5b60206101e060246370a0823161016052306101805261017c6006545afa6125ab57600080fd5b6000506101e051610140526101405161016051610180516101a0516101c0516101e0516102005163fd11c22361024052600435610260524761028052610140516102a0526102a0516102805161026051600658016109fd565b61030052610200526101e0526101c0526101a05261018052610160526101405261030051610200526001610200510260005260206000f350005b6395b68fe7600051141561273a57341561265757600080fd5b60006004351161266657600080fd5b6006543b61267357600080fd5b600654301861268157600080fd5b60206101e060246370a0823161016052306101805261017c6006545afa6126a757600080fd5b6000506101e051610140526101405161016051610180516101a0516101c0516101e051610200516389f2a87161024052600435610260526101405161028052476102a0526102a051610280516102605160065801610919565b61030052610200526101e0526101c0526101a05261018052610160526101405261030051610200526001610200510260005260206000f350005b632640f62c600051141561282357341561275357600080fd5b60006004351161276257600080fd5b6006543b61276f57600080fd5b600654301861277d57600080fd5b60206101e060246370a0823161016052306101805261017c6006545afa6127a357600080fd5b6000506101e051610140526101405161016051610180516101a0516101c0516101e05163fd11c223610220526004356102405261014051610260524761028052610280516102605161024051600658016109fd565b6102e0526101e0526101c0526101a0526101805261016052610140526102e05160005260206000f350005b63a9059cbb60005114156128e557341561283c57600080fd5b600435602051811061284d57600080fd5b5060043360e05260c052604060c02080546024358082101561286e57600080fd5b80820390509050815550600460043560e05260c052604060c020805460243581818301101561289c57600080fd5b8082019050905081555060243561014052600435337fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610140a3600160005260206000f350005b6323b872dd6000511415612a205734156128fe57600080fd5b600435602051811061290f57600080fd5b50602435602051811061292157600080fd5b50600460043560e05260c052604060c02080546044358082101561294457600080fd5b80820390509050815550600460243560e05260c052604060c020805460443581818301101561297257600080fd5b808201905090508155507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60443510156129df57600560043560e05260c052604060c0203360e05260c052604060c0208054604435808210156129d457600080fd5b808203905090508155505b604435610140526024356004357fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610140a3600160005260206000f350005b63095ea7b36000511415612aaa573415612a3957600080fd5b6004356020518110612a4a57600080fd5b5060243560053360e05260c052604060c02060043560e05260c052604060c0205560243561014052600435337f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256020610140a3600160005260206000f350005b6306fdde036000511415612b5e573415612ac357600080fd5b60008060c052602060c020610180602082540161012060006002818352015b82610120516020021115612af557612b17565b61012051850154610120516020028501525b8151600101808352811415612ae2575b50505050505061018051806101a001818260206001820306601f82010390500336823750506020610160526040610180510160206001820306601f8201039050610160f350005b6395d89b416000511415612c12573415612b7757600080fd5b60018060c052602060c020610180602082540161012060006002818352015b82610120516020021115612ba957612bcb565b61012051850154610120516020028501525b8151600101808352811415612b96575b50505050505061018051806101a001818260206001820306601f82010390500336823750506020610160526040610180510160206001820306601f8201039050610160f350005b63313ce5676000511415612c39573415612c2b57600080fd5b60025460005260206000f350005b6318160ddd6000511415612c60573415612c5257600080fd5b60035460005260206000f350005b6370a082316000511415612ca7573415612c7957600080fd5b6004356020518110612c8a57600080fd5b50600460043560e05260c052604060c0205460005260206000f350005b63dd62ed3e6000511415612d0e573415612cc057600080fd5b6004356020518110612cd157600080fd5b506024356020518110612ce357600080fd5b50600560043560e05260c052604060c02060243560e05260c052604060c0205460005260206000f350005b63fc0c546a6000511415612d35573415612d2757600080fd5b60065460005260206000f350005b63c45a01556000511415612d5c573415612d4e57600080fd5b60075460005260206000f350005b5b638c717a33610140523461016052600161018052426101a052336101c052336101e0526101e0516101c0516101a051610180516101605160065801610aef565b61024052610240505b610004612daa03610004600039610004612daa036000f3",
  "deployedBytecode": "0x600436101561000d57612d5d565b600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a0526366d3820360005114156102015734156100ba57600080fd5b60043560205181106100cb57600080fd5b5060006004351415600654156007541516166100e657600080fd5b33600755600435600655600a610140527f556e6973776170205632000000000000000000000000000000000000000000006101605261014080600060c052602060c020602082510161012060006002818352015b8261012051602002111561014d5761016f565b61012051602002850151610120518501555b815160010180835281141561013a575b50505050505060066101a0527f554e492d563200000000000000000000000000000000000000000000000000006101c0526101a080600160c052602060c020602082510161012060006002818352015b826101205160200211156101d2576101f4565b61012051602002850151610120518501555b81516001018083528114156101bf575b5050505050506012600255005b639d76ea58600051141561022857341561021a57600080fd5b60065460005260206000f350005b63966dae0e600051141561024f57341561024157600080fd5b60075460005260206000f350005b63422f104360005114156106695762ffffff541561026c57600080fd5b600162ffffff5560003411600060243511164260443510151661028e57600080fd5b6003546101405260006101405111156104e9576000600435116102b057600080fd5b4734808210156102bf57600080fd5b80820390509050610360526006543b6102d757600080fd5b60065430186102e557600080fd5b602061042060246370a082316103a052306103c0526103bc6006545afa61030b57600080fd5b60005061042051610380523461038051808202821582848304141761032f57600080fd5b8090509050905061036051808061034557600080fd5b820490509050600181818301101561035c57600080fd5b80820190509050610440523461014051808202821582848304141761038057600080fd5b8090509050905061036051808061039657600080fd5b82049050905061046052600435610460511015610440516024351015166103bc57600080fd5b60043360e05260c052604060c0208054610460518181830110156103df57600080fd5b80820190509050815550610140516104605181818301101561040057600080fd5b808201905090506003556006543b61041757600080fd5b600654301861042557600080fd5b602061056060646323b872dd6104a052336104c052306104e05261044051610500526104bc60006006545af161045a57600080fd5b60005061056051610480526104805161047257600080fd5b6104405134337f06239653922ac7bea6aa2b19dc486b9361821d37712eb796adfd38d81de278ca60006000a461046051610580523360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610580a361046051600052600062ffffff5560206000f350610660565b633b9aca003410156000600654141560006007541415161661050a57600080fd5b306007543b61051857600080fd5b600754301861052657600080fd5b60206101e060246306f2bf62610160526006546101805261017c6007545afa61054e57600080fd5b6000506101e0511461055f57600080fd5b602435610200524761022052610220516003556102205160043360e05260c052604060c020556006543b61059257600080fd5b60065430186105a057600080fd5b602061032060646323b872dd610260523361028052306102a052610200516102c05261027c60006006545af16105d557600080fd5b6000506103205161024052610240516105ed57600080fd5b6102005134337f06239653922ac7bea6aa2b19dc486b9361821d37712eb796adfd38d81de278ca60006000a461022051610340523360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610340a361022051600052600062ffffff5560206000f3505b600062ffffff55005b63f88bf15a60005114156109115762ffffff541561068657600080fd5b600162ffffff55341561069857600080fd5b6000604435116000602435111642606435101560006004351116166106bc57600080fd5b60035461014052600061014051116106d357600080fd5b6006543b6106e057600080fd5b60065430186106ee57600080fd5b602061020060246370a0823161018052306101a05261019c6006545afa61071457600080fd5b600050610200516101605260043547808202821582848304141761073757600080fd5b8090509050905061014051808061074d57600080fd5b8204905090506102205260043561016051808202821582848304141761077257600080fd5b8090509050905061014051808061078857600080fd5b82049050905061024052604435610240511015602435610220511015166107ae57600080fd5b60043360e05260c052604060c0208054600435808210156107ce57600080fd5b8082039050905081555061014051600435808210156107ec57600080fd5b80820390509050600355600060006000600061022051336000f161080f57600080fd5b6006543b61081c57600080fd5b600654301861082a57600080fd5b6020610320604463a9059cbb61028052336102a052610240516102c05261029c60006006545af161085a57600080fd5b60005061032051610260526102605161087257600080fd5b6102405161022051337f0fbf06c058b90cb038a618f8c2acbf6145f8b3570fd1fa56abb8f0f3f05b36e860006000a4600435610340526000337fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610340a361036080808061022051815250506020810190508080610240518152505060409050905060c052600062ffffff5560c051610360f350600062ffffff55005b6000156109f5575b6101a05261014052610160526101805260006101805111600061016051111661094157600080fd5b610140516103e5808202821582848304141761095c57600080fd5b809050905090506101c0526101c05161018051808202821582848304141761098357600080fd5b809050905090506101e052610160516103e880820282158284830414176109a957600080fd5b809050905090506101c0518181830110156109c357600080fd5b80820190509050610200526101e0516102005180806109e157600080fd5b8204905090506000526000516101a0515650005b600015610ae7575b6101a052610140526101605261018052600061018051116000610160511116610a2557600080fd5b61016051610140518082028215828483041417610a4157600080fd5b809050905090506103e88082028215828483041417610a5f57600080fd5b809050905090506101c052610180516101405180821015610a7f57600080fd5b808203905090506103e58082028215828483041417610a9d57600080fd5b809050905090506101e0526101c0516101e0518080610abb57600080fd5b8204905090506001818183011015610ad257600080fd5b808201905090506000526000516101a0515650005b600015610d00575b62ffffff5415610afe57600080fd5b600162ffffff556101e0526101405261016052610180526101a0526101c0526000610160511160006101405111164261018051101516610b3d57600080fd5b6006543b610b4a57600080fd5b6006543018610b5857600080fd5b60206102a060246370a0823161022052306102405261023c6006545afa610b7e57600080fd5b6000506102a051610200526101406102e0525b6102e0515160206102e051016102e0526102e06102e0511015610bb357610b91565b6389f2a871610300526101405161032052476101405180821015610bd657600080fd5b8082039050905061034052610200516103605261036051610340516103205160065801610919565b6103c0526102c06102e0525b6102e0515260206102e051036102e0526101406102e051101515610c2d57610c0a565b6103c0516102c052610160516102c0511015610c4857600080fd5b6006543b610c5557600080fd5b6006543018610c6357600080fd5b60206104a0604463a9059cbb610400526101c051610420526102c0516104405261041c60006006545af1610c9657600080fd5b6000506104a0516103e0526103e051610cae57600080fd5b6102c051610140516101a0517fcd60aa75dea3072fbc07ae6d7d856b5dc5f4eee88854f5b4abf7b680ef8bc50f60006000a46102c051600052600051600062ffffff556101e0515650600062ffffff55005b63f39b5b9b6000511415610d6457638c717a33610140523461016052600435610180526024356101a052336101c052336101e0526101e0516101c0516101a051610180516101605160065801610aef565b610240526102405160005260206000f350005b63ad65d76d6000511415610df3576044356020518110610d8357600080fd5b506000604435141530604435141516610d9b57600080fd5b638c717a33610140523461016052600435610180526024356101a052336101c0526044356101e0526101e0516101c0516101a051610180516101605160065801610aef565b610240526102405160005260206000f350005b60001561104b575b62ffffff5415610e0a57600080fd5b600162ffffff556101e0526101405261016052610180526101a0526101c0526000610160511160006101405111164261018051101516610e4957600080fd5b6006543b610e5657600080fd5b6006543018610e6457600080fd5b60206102a060246370a0823161022052306102405261023c6006545afa610e8a57600080fd5b6000506102a051610200526101406102e0525b6102e0515160206102e051016102e0526102e06102e0511015610ebf57610e9d565b63fd11c223610300526101405161032052476101605180821015610ee257600080fd5b80820390509050610340526102005161036052610360516103405161032051600658016109fd565b6103c0526102c06102e0525b6102e0515260206102e051036102e0526101406102e051101515610f3957610f16565b6103c0516102c0526101605160016102c0510280821015610f5957600080fd5b808203905090506103e05260006103e0511115610f8d5760006000600060006103e0516101a0516000f1610f8c57600080fd5b5b6006543b610f9a57600080fd5b6006543018610fa857600080fd5b60206104c0604463a9059cbb610420526101c05161044052610140516104605261043c60006006545af1610fdb57600080fd5b6000506104c0516104005261040051610ff357600080fd5b6101405160016102c051026101a0517fcd60aa75dea3072fbc07ae6d7d856b5dc5f4eee88854f5b4abf7b680ef8bc50f60006000a460016102c05102600052600051600062ffffff556101e0515650600062ffffff55005b636b1d4db760005114156110af57632dff394e610140526004356101605234610180526024356101a052336101c052336101e0526101e0516101c0516101a051610180516101605160065801610dfb565b610240526102405160005260206000f350005b630b573638600051141561113e5760443560205181106110ce57600080fd5b5060006044351415306044351415166110e657600080fd5b632dff394e610140526004356101605234610180526024356101a052336101c0526044356101e0526101e0516101c0516101a051610180516101605160065801610dfb565b610240526102405160005260206000f350005b60001561136b575b62ffffff541561115557600080fd5b600162ffffff556101e0526101405261016052610180526101a0526101c052600061016051116000610140511116426101805110151661119457600080fd5b6006543b6111a157600080fd5b60065430186111af57600080fd5b60206102a060246370a0823161022052306102405261023c6006545afa6111d557600080fd5b6000506102a051610200526101406102e0525b6102e0515160206102e051016102e0526102e06102e051101561120a576111e8565b6389f2a8716103005261014051610320526102005161034052476103605261036051610340516103205160065801610919565b6103c0526102c06102e0525b6102e0515260206102e051036102e0526101406102e05110151561126c57611249565b6103c0516102c05260016102c051026103e052610160516103e051101561129257600080fd5b60006000600060006103e0516101c0516000f16112ae57600080fd5b6006543b6112bb57600080fd5b60065430186112c957600080fd5b60206104e060646323b872dd610420526101a051610440523061046052610140516104805261043c60006006545af161130157600080fd5b6000506104e051610400526104005161131957600080fd5b6103e051610140516101a0517f7f4091b46c33e918a0f3aa42307641d17bb67029427a5369e54b35398423870560006000a46103e051600052600051600062ffffff556101e0515650600062ffffff55005b6395e3c50b60005114156113dc57341561138457600080fd5b63fa1bb7be6101405260043561016052602435610180526044356101a052336101c052336101e0526101e0516101c0516101a051610180516101605160065801611146565b610240526102405160005260206000f350005b637237e03160005114156114785734156113f557600080fd5b606435602051811061140657600080fd5b50600060643514153060643514151661141e57600080fd5b63fa1bb7be6101405260043561016052602435610180526044356101a052336101c0526064356101e0526101e0516101c0516101a051610180516101605160065801611146565b610240526102405160005260206000f350005b600015611692575b62ffffff541561148f57600080fd5b600162ffffff556101e0526101405261016052610180526101a0526101c0526000610140511142610180511015166114c657600080fd5b6006543b6114d357600080fd5b60065430186114e157600080fd5b60206102a060246370a0823161022052306102405261023c6006545afa61150757600080fd5b6000506102a051610200526101406102e0525b6102e0515160206102e051016102e0526102e06102e051101561153c5761151a565b63fd11c22361030052610140516103205261020051610340524761036052610360516103405161032051600658016109fd565b6103c0526102c06102e0525b6102e0515260206102e051036102e0526101406102e05110151561159e5761157b565b6103c0516102c0526102c0516101605110156115b957600080fd5b6000600060006000610140516101c0516000f16115d557600080fd5b6006543b6115e257600080fd5b60065430186115f057600080fd5b60206104c060646323b872dd610400526101a0516104205230610440526102c0516104605261041c60006006545af161162857600080fd5b6000506104c0516103e0526103e05161164057600080fd5b610140516102c0516101a0517f7f4091b46c33e918a0f3aa42307641d17bb67029427a5369e54b35398423870560006000a46102c051600052600051600062ffffff556101e0515650600062ffffff55005b63013efd8b60005114156117035734156116ab57600080fd5b63984fe8f66101405260043561016052602435610180526044356101a052336101c052336101e0526101e0516101c0516101a051610180516101605160065801611480565b610240526102405160005260206000f350005b63d4e4841d600051141561179f57341561171c57600080fd5b606435602051811061172d57600080fd5b50600060643514153060643514151661174557600080fd5b63984fe8f66101405260043561016052602435610180526044356101a052336101c0526064356101e0526101e0516101c0516101a051610180516101605160065801611480565b610240526102405160005260206000f350005b600015611a3f575b62ffffff54156117b657600080fd5b600162ffffff55610220526101405261016052610180526101a0526101c0526101e0526102005260006101805111600061016051111660006101405111426101a0511015161661180557600080fd5b6000610200511415306102005114151661181e57600080fd5b6006543b61182b57600080fd5b600654301861183957600080fd5b60206102e060246370a0823161026052306102805261027c6006545afa61185f57600080fd5b6000506102e05161024052610140610320525b6103205151602061032051016103205261032061032051101561189457611872565b6389f2a8716103405261014051610360526102405161038052476103a0526103a051610380516103605160065801610919565b61040052610300610320525b61032051526020610320510361032052610140610320511015156118f6576118d3565b610400516103005260016103005102610420526101805161042051101561191c57600080fd5b6006543b61192957600080fd5b600654301861193757600080fd5b602061052060646323b872dd610460526101c05161048052306104a052610140516104c05261047c60006006545af161196f57600080fd5b60005061052051610440526104405161198757600080fd5b610200513b61199557600080fd5b6102005130186119a457600080fd5b6020610620606463ad65d76d6105605261016051610580526101a0516105a0526101e0516105c05261057c61042051610200515af16119e257600080fd5b600050610620516105405261042051610140516101c0517f7f4091b46c33e918a0f3aa42307641d17bb67029427a5369e54b35398423870560006000a461054051600052600051600062ffffff55610220515650600062ffffff55005b63ddf7e1a76000511415611b57573415611a5857600080fd5b6084356020518110611a6957600080fd5b506007543b611a7757600080fd5b6007543018611a8557600080fd5b60206101e060246306f2bf62610160526084356101805261017c6007545afa611aad57600080fd5b6000506101e051610140526101405161016051610180516101a0516101c0516101e05163204ea33b610220526004356102405260243561026052604435610280526064356102a052336102c052336102e0526101405161030052610300516102e0516102c0516102a051610280516102605161024051600658016117a7565b610360526101e0526101c0526101a0526101805261016052610140526103605160005260206000f350005b63f552d91b6000511415611c83573415611b7057600080fd5b6084356020518110611b8157600080fd5b5060a4356020518110611b9357600080fd5b506007543b611ba157600080fd5b6007543018611baf57600080fd5b60206101e060246306f2bf626101605260a4356101805261017c6007545afa611bd757600080fd5b6000506101e051610140526101405161016051610180516101a0516101c0516101e05163204ea33b610220526004356102405260243561026052604435610280526064356102a052336102c0526084356102e0526101405161030052610300516102e0516102c0516102a051610280516102605161024051600658016117a7565b610360526101e0526101c0526101a0526101805261016052610140526103605160005260206000f350005b600015611f6d575b62ffffff5415611c9a57600080fd5b600162ffffff55610220526101405261016052610180526101a0526101c0526101e05261020052600061018051116000610140511116426101a051101516611ce157600080fd5b60006102005114153061020051141516611cfa57600080fd5b610200513b611d0857600080fd5b610200513018611d1757600080fd5b60206102e060246359e9486261026052610140516102805261027c610200515afa611d4157600080fd5b6000506102e051610240526006543b611d5957600080fd5b6006543018611d6757600080fd5b60206103a060246370a0823161032052306103405261033c6006545afa611d8d57600080fd5b6000506103a051610300526101406103e0525b6103e0515160206103e051016103e0526103e06103e0511015611dc257611da0565b63fd11c22361040052610240516104205261030051610440524761046052610460516104405161042051600658016109fd565b6104c0526103c06103e0525b6103e0515260206103e051036103e0526101406103e051101515611e2457611e01565b6104c0516103c052610240516101805110156103c05161016051101516611e4a57600080fd5b6006543b611e5757600080fd5b6006543018611e6557600080fd5b60206105c060646323b872dd610500526101c0516105205230610540526103c0516105605261051c60006006545af1611e9d57600080fd5b6000506105c0516104e0526104e051611eb557600080fd5b610200513b611ec357600080fd5b610200513018611ed257600080fd5b60206106c06064630b5736386106005261014051610620526101a051610640526101e0516106605261061c61024051610200515af1611f1057600080fd5b6000506106c0516105e052610240516103c0516101c0517f7f4091b46c33e918a0f3aa42307641d17bb67029427a5369e54b35398423870560006000a46103c051600052600051600062ffffff55610220515650600062ffffff55005b63b040d5456000511415612085573415611f8657600080fd5b6084356020518110611f9757600080fd5b506007543b611fa557600080fd5b6007543018611fb357600080fd5b60206101e060246306f2bf62610160526084356101805261017c6007545afa611fdb57600080fd5b6000506101e051610140526101405161016051610180516101a0516101c0516101e051631a7b28f2610220526004356102405260243561026052604435610280526064356102a052336102c052336102e0526101405161030052610300516102e0516102c0516102a05161028051610260516102405160065801611c8b565b610360526101e0526101c0526101a0526101805261016052610140526103605160005260206000f350005b63f3c0efe960005114156121b157341561209e57600080fd5b60843560205181106120af57600080fd5b5060a43560205181106120c157600080fd5b506007543b6120cf57600080fd5b60075430186120dd57600080fd5b60206101e060246306f2bf626101605260a4356101805261017c6007545afa61210557600080fd5b6000506101e051610140526101405161016051610180516101a0516101c0516101e051631a7b28f2610220526004356102405260243561026052604435610280526064356102a052336102c0526084356102e0526101405161030052610300516102e0516102c0516102a05161028051610260516102405160065801611c8b565b610360526101e0526101c0526101a0526101805261016052610140526103605160005260206000f350005b63b1cb43bf600051141561224a5734156121ca57600080fd5b60843560205181106121db57600080fd5b5063204ea33b6101405260043561016052602435610180526044356101a0526064356101c052336101e05233610200526084356102205261022051610200516101e0516101c0516101a0516101805161016051600658016117a7565b610280526102805160005260206000f350005b63ec384a3e600051141561230557341561226357600080fd5b608435602051811061227457600080fd5b5060a435602051811061228657600080fd5b50306084351861229557600080fd5b63204ea33b6101405260043561016052602435610180526044356101a0526064356101c052336101e0526084356102005260a4356102205261022051610200516101e0516101c0516101a0516101805161016051600658016117a7565b610280526102805160005260206000f350005b63ea650c7d600051141561239e57341561231e57600080fd5b608435602051811061232f57600080fd5b50631a7b28f26101405260043561016052602435610180526044356101a0526064356101c052336101e05233610200526084356102205261022051610200516101e0516101c0516101a051610180516101605160065801611c8b565b610280526102805160005260206000f350005b63981a132760005114156124595734156123b757600080fd5b60843560205181106123c857600080fd5b5060a43560205181106123da57600080fd5b5030608435186123e957600080fd5b631a7b28f26101405260043561016052602435610180526044356101a0526064356101c052336101e0526084356102005260a4356102205261022051610200516101e0516101c0516101a051610180516101605160065801611c8b565b610280526102805160005260206000f350005b63cd7724c3600051141561254257341561247257600080fd5b60006004351161248157600080fd5b6006543b61248e57600080fd5b600654301861249c57600080fd5b60206101e060246370a0823161016052306101805261017c6006545afa6124c257600080fd5b6000506101e051610140526101405161016051610180516101a0516101c0516101e0516389f2a87161022052600435610240524761026052610140516102805261028051610260516102405160065801610919565b6102e0526101e0526101c0526101a0526101805261016052610140526102e05160005260206000f350005b6359e94862600051141561263e57341561255b57600080fd5b60006004351161256a57600080fd5b6006543b61257757600080fd5b600654301861258557600080fd5b60206101e060246370a0823161016052306101805261017c6006545afa6125ab57600080fd5b6000506101e051610140526101405161016051610180516101a0516101c0516101e0516102005163fd11c22361024052600435610260524761028052610140516102a0526102a0516102805161026051600658016109fd565b61030052610200526101e0526101c0526101a05261018052610160526101405261030051610200526001610200510260005260206000f350005b6395b68fe7600051141561273a57341561265757600080fd5b60006004351161266657600080fd5b6006543b61267357600080fd5b600654301861268157600080fd5b60206101e060246370a0823161016052306101805261017c6006545afa6126a757600080fd5b6000506101e051610140526101405161016051610180516101a0516101c0516101e051610200516389f2a87161024052600435610260526101405161028052476102a0526102a051610280516102605160065801610919565b61030052610200526101e0526101c0526101a05261018052610160526101405261030051610200526001610200510260005260206000f350005b632640f62c600051141561282357341561275357600080fd5b60006004351161276257600080fd5b6006543b61276f57600080fd5b600654301861277d57600080fd5b60206101e060246370a0823161016052306101805261017c6006545afa6127a357600080fd5b6000506101e051610140526101405161016051610180516101a0516101c0516101e05163fd11c223610220526004356102405261014051610260524761028052610280516102605161024051600658016109fd565b6102e0526101e0526101c0526101a0526101805261016052610140526102e05160005260206000f350005b63a9059cbb60005114156128e557341561283c57600080fd5b600435602051811061284d57600080fd5b5060043360e05260c052604060c02080546024358082101561286e57600080fd5b80820390509050815550600460043560e05260c052604060c020805460243581818301101561289c57600080fd5b8082019050905081555060243561014052600435337fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610140a3600160005260206000f350005b6323b872dd6000511415612a205734156128fe57600080fd5b600435602051811061290f57600080fd5b50602435602051811061292157600080fd5b50600460043560e05260c052604060c02080546044358082101561294457600080fd5b80820390509050815550600460243560e05260c052604060c020805460443581818301101561297257600080fd5b808201905090508155507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60443510156129df57600560043560e05260c052604060c0203360e05260c052604060c0208054604435808210156129d457600080fd5b808203905090508155505b604435610140526024356004357fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610140a3600160005260206000f350005b63095ea7b36000511415612aaa573415612a3957600080fd5b6004356020518110612a4a57600080fd5b5060243560053360e05260c052604060c02060043560e05260c052604060c0205560243561014052600435337f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256020610140a3600160005260206000f350005b6306fdde036000511415612b5e573415612ac357600080fd5b60008060c052602060c020610180602082540161012060006002818352015b82610120516020021115612af557612b17565b61012051850154610120516020028501525b8151600101808352811415612ae2575b50505050505061018051806101a001818260206001820306601f82010390500336823750506020610160526040610180510160206001820306601f8201039050610160f350005b6395d89b416000511415612c12573415612b7757600080fd5b60018060c052602060c020610180602082540161012060006002818352015b82610120516020021115612ba957612bcb565b61012051850154610120516020028501525b8151600101808352811415612b96575b50505050505061018051806101a001818260206001820306601f82010390500336823750506020610160526040610180510160206001820306601f8201039050610160f350005b63313ce5676000511415612c39573415612c2b57600080fd5b60025460005260206000f350005b6318160ddd6000511415612c60573415612c5257600080fd5b60035460005260206000f350005b6370a082316000511415612ca7573415612c7957600080fd5b6004356020518110612c8a57600080fd5b50600460043560e05260c052604060c0205460005260206000f350005b63dd62ed3e6000511415612d0e573415612cc057600080fd5b6004356020518110612cd157600080fd5b506024356020518110612ce357600080fd5b50600560043560e05260c052604060c02060243560e05260c052604060c0205460005260206000f350005b63fc0c546a6000511415612d35573415612d2757600080fd5b60065460005260206000f350005b63c45a01556000511415612d5c573415612d4e57600080fd5b60075460005260206000f350005b5b638c717a33610140523461016052600161018052426101a052336101c052336101e0526101e0516101c0516101a051610180516101605160065801610aef565b6102405261024050",
  "source": "contract Factory():\r\n    def getExchange(token_addr: address) -> address: constant\r\n\r\ncontract Exchange():\r\n    def getEthToTokenOutputPrice(tokens_bought: uint256) -> uint256(wei): constant\r\n    def ethToTokenTransferInput(min_tokens: uint256, deadline: timestamp, recipient: address) -> uint256: modifying\r\n    def ethToTokenTransferOutput(tokens_bought: uint256, deadline: timestamp, recipient: address) -> uint256(wei): modifying\r\n\r\ncontract Token():\r\n    def balanceOf(_owner : address) -> uint256: constant\r\n    def transfer(_to : address, _value : uint256) -> bool: modifying\r\n    def transferFrom(_from : address, _to : address, _value : uint256) -> bool: modifying\r\n\r\n\r\nTokenPurchase: event({buyer: indexed(address), eth_sold: indexed(uint256(wei)), tokens_bought: indexed(uint256)})\r\nEthPurchase: event({buyer: indexed(address), tokens_sold: indexed(uint256), eth_bought: indexed(uint256(wei))})\r\nAddLiquidity: event({provider: indexed(address), eth_amount: indexed(uint256(wei)), token_amount: indexed(uint256)})\r\nRemoveLiquidity: event({provider: indexed(address), eth_amount: indexed(uint256(wei)), token_amount: indexed(uint256)})\r\nTransfer: event({_from: indexed(address), _to: indexed(address), _value: uint256})\r\nApproval: event({_owner: indexed(address), _spender: indexed(address), _value: uint256})\r\n\r\nname: public(string[32])                                    # Uniswap V1\r\nsymbol: public(string[32])                                  # UNI-V1\r\ndecimals: public(uint256)                                   # 18\r\ntotalSupply: public(uint256)                                # total number of UNI in existence\r\nbalanceOf: public(map(address, uint256))                    # UNI balance of an address\r\nallowance: public(map(address, map(address, uint256)))      # UNI allowance of one address on another\r\ntoken: public(Token)                                        # address of the ERC20 token traded on this contract\r\nfactory: public(Factory)                                    # interface for the factory that created this contract\r\n\r\n# @dev This function acts as a contract constructor which is not currently supported in contracts deployed\r\n#      using create_with_code_of(). It is called once by the factory during contract creation.\r\n@public\r\ndef setup(token_addr: address):\r\n    assert (self.factory == ZERO_ADDRESS and self.token == ZERO_ADDRESS) and token_addr != ZERO_ADDRESS\r\n    self.factory = Factory(msg.sender)\r\n    self.token = Token(token_addr)\r\n    self.name = 'Uniswap V2'\r\n    self.symbol = 'UNI-V2'\r\n    self.decimals = 18\r\n\r\n# @return Address of Token that is sold on this exchange.\r\n@public\r\n@constant\r\ndef tokenAddress() -> address:\r\n    return self.token\r\n\r\n# @return Address of factory that created this exchange.\r\n@public\r\n@constant\r\ndef factoryAddress() -> address:\r\n    return self.factory\r\n\r\n# @notice Deposit ETH and Tokens (self.token) at current ratio to mint UNI tokens.\r\n# @dev min_liquidity does nothing when total UNI supply is 0.\r\n# @param min_liquidity Minimum number of UNI sender will mint if total UNI supply is greater than 0.\r\n# @param max_tokens Maximum number of tokens deposited. Deposits max amount if total UNI supply is 0.\r\n# @param deadline Time after which this transaction can no longer be executed.\r\n# @return The amount of UNI minted.\r\n@public\r\n@payable\r\n@nonreentrant('lock')\r\ndef addLiquidity(min_liquidity: uint256, max_tokens: uint256, deadline: timestamp) -> uint256:\r\n    # TODO: improve safety checks\r\n    assert deadline >= block.timestamp and (max_tokens > 0 and msg.value > 0)\r\n    total_liquidity: uint256 = self.totalSupply\r\n    if total_liquidity > 0:\r\n        assert min_liquidity > 0\r\n        eth_reserve: uint256(wei) = self.balance - msg.value\r\n        token_reserve: uint256 = self.token.balanceOf(self)\r\n        token_amount: uint256 = msg.value * token_reserve / eth_reserve + 1\r\n        liquidity_minted: uint256 = msg.value * total_liquidity / eth_reserve\r\n        assert max_tokens >= token_amount and liquidity_minted >= min_liquidity\r\n        self.balanceOf[msg.sender] += liquidity_minted\r\n        self.totalSupply = total_liquidity + liquidity_minted\r\n        success: bool = self.token.transferFrom(msg.sender, self, token_amount)\r\n        assert success\r\n        log.AddLiquidity(msg.sender, msg.value, token_amount)\r\n        log.Transfer(ZERO_ADDRESS, msg.sender, liquidity_minted)\r\n        return liquidity_minted\r\n    else:\r\n        # TODO: figure out initial pool token balance\r\n        assert (self.factory != ZERO_ADDRESS and self.token != ZERO_ADDRESS) and msg.value >= 1000000000\r\n        assert self.factory.getExchange(self.token) == self\r\n        token_amount: uint256 = max_tokens\r\n        initial_liquidity: uint256 = as_unitless_number(self.balance)\r\n        self.totalSupply = initial_liquidity\r\n        self.balanceOf[msg.sender] = initial_liquidity\r\n        success: bool = self.token.transferFrom(msg.sender, self, token_amount)\r\n        assert success\r\n        log.AddLiquidity(msg.sender, msg.value, token_amount)\r\n        log.Transfer(ZERO_ADDRESS, msg.sender, initial_liquidity)\r\n        return initial_liquidity\r\n\r\n# @dev Burn UNI tokens to withdraw ETH and Tokens at current ratio.\r\n# @param amount Amount of UNI burned.\r\n# @param min_eth Minimum ETH withdrawn.\r\n# @param min_tokens Minimum Tokens withdrawn.\r\n# @param deadline Time after which this transaction can no longer be executed.\r\n# @return The amount of ETH and Tokens withdrawn.\r\n@public\r\n@nonreentrant('lock')\r\ndef removeLiquidity(amount: uint256, min_eth: uint256(wei), min_tokens: uint256, deadline: timestamp) -> (uint256(wei), uint256):\r\n    assert (amount > 0 and deadline >= block.timestamp) and (min_eth > 0 and min_tokens > 0)\r\n    total_liquidity: uint256 = self.totalSupply\r\n    assert total_liquidity > 0\r\n    token_reserve: uint256 = self.token.balanceOf(self)\r\n    eth_amount: uint256(wei) = amount * self.balance / total_liquidity\r\n    token_amount: uint256 = amount * token_reserve / total_liquidity\r\n    assert eth_amount >= min_eth and token_amount >= min_tokens\r\n    self.balanceOf[msg.sender] -= amount\r\n    self.totalSupply = total_liquidity - amount\r\n    send(msg.sender, eth_amount)\r\n    success: bool = self.token.transfer(msg.sender, token_amount)\r\n    assert success\r\n    log.RemoveLiquidity(msg.sender, eth_amount, token_amount)\r\n    log.Transfer(msg.sender, ZERO_ADDRESS, amount)\r\n    return eth_amount, token_amount\r\n\r\n# @dev Pricing function for converting between ETH and Tokens.\r\n# @param input_amount Amount of ETH or Tokens being sold.\r\n# @param input_reserve Amount of ETH or Tokens (input type) in exchange reserves.\r\n# @param output_reserve Amount of ETH or Tokens (output type) in exchange reserves.\r\n# @return Amount of ETH or Tokens bought.\r\n@private\r\n@constant\r\ndef getInputPrice(input_amount: uint256, input_reserve: uint256, output_reserve: uint256) -> uint256:\r\n    assert input_reserve > 0 and output_reserve > 0\r\n    input_amount_with_fee: uint256 = input_amount * 997\r\n    numerator: uint256 = input_amount_with_fee * output_reserve\r\n    denominator: uint256 = (input_reserve * 1000) + input_amount_with_fee\r\n    return numerator / denominator\r\n\r\n# @dev Pricing function for converting between ETH and Tokens.\r\n# @param output_amount Amount of ETH or Tokens being bought.\r\n# @param input_reserve Amount of ETH or Tokens (input type) in exchange reserves.\r\n# @param output_reserve Amount of ETH or Tokens (output type) in exchange reserves.\r\n# @return Amount of ETH or Tokens sold.\r\n@private\r\n@constant\r\ndef getOutputPrice(output_amount: uint256, input_reserve: uint256, output_reserve: uint256) -> uint256:\r\n    assert input_reserve > 0 and output_reserve > 0\r\n    numerator: uint256 = input_reserve * output_amount * 1000\r\n    denominator: uint256 = (output_reserve - output_amount) * 997\r\n    return numerator / denominator + 1\r\n\r\n@private\r\n@nonreentrant('lock')\r\ndef ethToTokenInput(eth_sold: uint256(wei), min_tokens: uint256, deadline: timestamp, buyer: address, recipient: address) -> uint256:\r\n    assert deadline >= block.timestamp and (eth_sold > 0 and min_tokens > 0)\r\n    token_reserve: uint256 = self.token.balanceOf(self)\r\n    tokens_bought: uint256 = self.getInputPrice(as_unitless_number(eth_sold), as_unitless_number(self.balance - eth_sold), token_reserve)\r\n    assert tokens_bought >= min_tokens\r\n    success: bool = self.token.transfer(recipient, tokens_bought)\r\n    assert success\r\n    log.TokenPurchase(buyer, eth_sold, tokens_bought)\r\n    return tokens_bought\r\n\r\n# @notice Convert ETH to Tokens.\r\n# @dev User specifies exact input (msg.value).\r\n# @dev User cannot specify minimum output or deadline.\r\n@public\r\n@payable\r\ndef __default__():\r\n    self.ethToTokenInput(msg.value, 1, block.timestamp, msg.sender, msg.sender)\r\n\r\n# @notice Convert ETH to Tokens.\r\n# @dev User specifies exact input (msg.value) and minimum output.\r\n# @param min_tokens Minimum Tokens bought.\r\n# @param deadline Time after which this transaction can no longer be executed.\r\n# @return Amount of Tokens bought.\r\n@public\r\n@payable\r\ndef ethToTokenSwapInput(min_tokens: uint256, deadline: timestamp) -> uint256:\r\n    return self.ethToTokenInput(msg.value, min_tokens, deadline, msg.sender, msg.sender)\r\n\r\n# @notice Convert ETH to Tokens and transfers Tokens to recipient.\r\n# @dev User specifies exact input (msg.value) and minimum output\r\n# @param min_tokens Minimum Tokens bought.\r\n# @param deadline Time after which this transaction can no longer be executed.\r\n# @param recipient The address that receives output Tokens.\r\n# @return Amount of Tokens bought.\r\n@public\r\n@payable\r\ndef ethToTokenTransferInput(min_tokens: uint256, deadline: timestamp, recipient: address) -> uint256:\r\n    assert recipient != self and recipient != ZERO_ADDRESS\r\n    return self.ethToTokenInput(msg.value, min_tokens, deadline, msg.sender, recipient)\r\n\r\n@private\r\n@nonreentrant('lock')\r\ndef ethToTokenOutput(tokens_bought: uint256, max_eth: uint256(wei), deadline: timestamp, buyer: address, recipient: address) -> uint256(wei):\r\n    assert deadline >= block.timestamp and (tokens_bought > 0 and max_eth > 0)\r\n    token_reserve: uint256 = self.token.balanceOf(self)\r\n    eth_sold: uint256 = self.getOutputPrice(tokens_bought, as_unitless_number(self.balance - max_eth), token_reserve)\r\n    # Throws if eth_sold > max_eth\r\n    eth_refund: uint256(wei) = max_eth - as_wei_value(eth_sold, 'wei')\r\n    if eth_refund > 0:\r\n        send(buyer, eth_refund)\r\n    success: bool = self.token.transfer(recipient, tokens_bought)\r\n    assert success\r\n    log.TokenPurchase(buyer, as_wei_value(eth_sold, 'wei'), tokens_bought)\r\n    return as_wei_value(eth_sold, 'wei')\r\n\r\n# @notice Convert ETH to Tokens.\r\n# @dev User specifies maximum input (msg.value) and exact output.\r\n# @param tokens_bought Amount of tokens bought.\r\n# @param deadline Time after which this transaction can no longer be executed.\r\n# @return Amount of ETH sold.\r\n@public\r\n@payable\r\ndef ethToTokenSwapOutput(tokens_bought: uint256, deadline: timestamp) -> uint256(wei):\r\n    return self.ethToTokenOutput(tokens_bought, msg.value, deadline, msg.sender, msg.sender)\r\n\r\n# @notice Convert ETH to Tokens and transfers Tokens to recipient.\r\n# @dev User specifies maximum input (msg.value) and exact output.\r\n# @param tokens_bought Amount of tokens bought.\r\n# @param deadline Time after which this transaction can no longer be executed.\r\n# @param recipient The address that receives output Tokens.\r\n# @return Amount of ETH sold.\r\n@public\r\n@payable\r\ndef ethToTokenTransferOutput(tokens_bought: uint256, deadline: timestamp, recipient: address) -> uint256(wei):\r\n    assert recipient != self and recipient != ZERO_ADDRESS\r\n    return self.ethToTokenOutput(tokens_bought, msg.value, deadline, msg.sender, recipient)\r\n\r\n@private\r\n@nonreentrant('lock')\r\ndef tokenToEthInput(tokens_sold: uint256, min_eth: uint256(wei), deadline: timestamp, buyer: address, recipient: address) -> uint256(wei):\r\n    assert deadline >= block.timestamp and (tokens_sold > 0 and min_eth > 0)\r\n    token_reserve: uint256 = self.token.balanceOf(self)\r\n    eth_bought: uint256 = self.getInputPrice(tokens_sold, token_reserve, as_unitless_number(self.balance))\r\n    wei_bought: uint256(wei) = as_wei_value(eth_bought, 'wei')\r\n    assert wei_bought >= min_eth\r\n    send(recipient, wei_bought)\r\n    success: bool = self.token.transferFrom(buyer, self, tokens_sold)\r\n    assert success\r\n    log.EthPurchase(buyer, tokens_sold, wei_bought)\r\n    return wei_bought\r\n\r\n\r\n# @notice Convert Tokens to ETH.\r\n# @dev User specifies exact input and minimum output.\r\n# @param tokens_sold Amount of Tokens sold.\r\n# @param min_eth Minimum ETH purchased.\r\n# @param deadline Time after which this transaction can no longer be executed.\r\n# @return Amount of ETH bought.\r\n@public\r\ndef tokenToEthSwapInput(tokens_sold: uint256, min_eth: uint256(wei), deadline: timestamp) -> uint256(wei):\r\n    return self.tokenToEthInput(tokens_sold, min_eth, deadline, msg.sender, msg.sender)\r\n\r\n# @notice Convert Tokens to ETH and transfers ETH to recipient.\r\n# @dev User specifies exact input and minimum output.\r\n# @param tokens_sold Amount of Tokens sold.\r\n# @param min_eth Minimum ETH purchased.\r\n# @param deadline Time after which this transaction can no longer be executed.\r\n# @param recipient The address that receives output ETH.\r\n# @return Amount of ETH bought.\r\n@public\r\ndef tokenToEthTransferInput(tokens_sold: uint256, min_eth: uint256(wei), deadline: timestamp, recipient: address) -> uint256(wei):\r\n    assert recipient != self and recipient != ZERO_ADDRESS\r\n    return self.tokenToEthInput(tokens_sold, min_eth, deadline, msg.sender, recipient)\r\n\r\n@private\r\n@nonreentrant('lock')\r\ndef tokenToEthOutput(eth_bought: uint256(wei), max_tokens: uint256, deadline: timestamp, buyer: address, recipient: address) -> uint256:\r\n    assert deadline >= block.timestamp and eth_bought > 0\r\n    token_reserve: uint256 = self.token.balanceOf(self)\r\n    tokens_sold: uint256 = self.getOutputPrice(as_unitless_number(eth_bought), token_reserve, as_unitless_number(self.balance))\r\n    # tokens sold is always > 0\r\n    assert max_tokens >= tokens_sold\r\n    send(recipient, eth_bought)\r\n    success: bool = self.token.transferFrom(buyer, self, tokens_sold)\r\n    assert success\r\n    # assert self.token.transferFrom(buyer, self, tokens_sold)\r\n    log.EthPurchase(buyer, tokens_sold, eth_bought)\r\n    return tokens_sold\r\n\r\n# @notice Convert Tokens to ETH.\r\n# @dev User specifies maximum input and exact output.\r\n# @param eth_bought Amount of ETH purchased.\r\n# @param max_tokens Maximum Tokens sold.\r\n# @param deadline Time after which this transaction can no longer be executed.\r\n# @return Amount of Tokens sold.\r\n@public\r\ndef tokenToEthSwapOutput(eth_bought: uint256(wei), max_tokens: uint256, deadline: timestamp) -> uint256:\r\n    return self.tokenToEthOutput(eth_bought, max_tokens, deadline, msg.sender, msg.sender)\r\n\r\n# @notice Convert Tokens to ETH and transfers ETH to recipient.\r\n# @dev User specifies maximum input and exact output.\r\n# @param eth_bought Amount of ETH purchased.\r\n# @param max_tokens Maximum Tokens sold.\r\n# @param deadline Time after which this transaction can no longer be executed.\r\n# @param recipient The address that receives output ETH.\r\n# @return Amount of Tokens sold.\r\n@public\r\ndef tokenToEthTransferOutput(eth_bought: uint256(wei), max_tokens: uint256, deadline: timestamp, recipient: address) -> uint256:\r\n    assert recipient != self and recipient != ZERO_ADDRESS\r\n    return self.tokenToEthOutput(eth_bought, max_tokens, deadline, msg.sender, recipient)\r\n\r\n@private\r\n@nonreentrant('lock')\r\ndef tokenToTokenInput(tokens_sold: uint256, min_tokens_bought: uint256, min_eth_bought: uint256(wei), deadline: timestamp, buyer: address, recipient: address, exchange_addr: address) -> uint256:\r\n    assert (deadline >= block.timestamp and tokens_sold > 0) and (min_tokens_bought > 0 and min_eth_bought > 0)\r\n    assert exchange_addr != self and exchange_addr != ZERO_ADDRESS\r\n    token_reserve: uint256 = self.token.balanceOf(self)\r\n    eth_bought: uint256 = self.getInputPrice(tokens_sold, token_reserve, as_unitless_number(self.balance))\r\n    wei_bought: uint256(wei) = as_wei_value(eth_bought, 'wei')\r\n    assert wei_bought >= min_eth_bought\r\n    success: bool = self.token.transferFrom(buyer, self, tokens_sold)\r\n    assert success\r\n    # assert self.token.transferFrom(buyer, self, tokens_sold)\r\n    tokens_bought: uint256 = Exchange(exchange_addr).ethToTokenTransferInput(min_tokens_bought, deadline, recipient, value=wei_bought)\r\n    log.EthPurchase(buyer, tokens_sold, wei_bought)\r\n    return tokens_bought\r\n\r\n# @notice Convert Tokens (self.token) to Tokens (token_addr).\r\n# @dev User specifies exact input and minimum output.\r\n# @param tokens_sold Amount of Tokens sold.\r\n# @param min_tokens_bought Minimum Tokens (token_addr) purchased.\r\n# @param min_eth_bought Minimum ETH purchased as intermediary.\r\n# @param deadline Time after which this transaction can no longer be executed.\r\n# @param token_addr The address of the token being purchased.\r\n# @return Amount of Tokens (token_addr) bought.\r\n@public\r\ndef tokenToTokenSwapInput(tokens_sold: uint256, min_tokens_bought: uint256, min_eth_bought: uint256(wei), deadline: timestamp, token_addr: address) -> uint256:\r\n    exchange_addr: address = self.factory.getExchange(token_addr)\r\n    return self.tokenToTokenInput(tokens_sold, min_tokens_bought, min_eth_bought, deadline, msg.sender, msg.sender, exchange_addr)\r\n\r\n# @notice Convert Tokens (self.token) to Tokens (token_addr) and transfers\r\n#         Tokens (token_addr) to recipient.\r\n# @dev User specifies exact input and minimum output.\r\n# @param tokens_sold Amount of Tokens sold.\r\n# @param min_tokens_bought Minimum Tokens (token_addr) purchased.\r\n# @param min_eth_bought Minimum ETH purchased as intermediary.\r\n# @param deadline Time after which this transaction can no longer be executed.\r\n# @param recipient The address that receives output ETH.\r\n# @param token_addr The address of the token being purchased.\r\n# @return Amount of Tokens (token_addr) bought.\r\n@public\r\ndef tokenToTokenTransferInput(tokens_sold: uint256, min_tokens_bought: uint256, min_eth_bought: uint256(wei), deadline: timestamp, recipient: address, token_addr: address) -> uint256:\r\n    exchange_addr: address = self.factory.getExchange(token_addr)\r\n    return self.tokenToTokenInput(tokens_sold, min_tokens_bought, min_eth_bought, deadline, msg.sender, recipient, exchange_addr)\r\n\r\n@private\r\n@nonreentrant('lock')\r\ndef tokenToTokenOutput(tokens_bought: uint256, max_tokens_sold: uint256, max_eth_sold: uint256(wei), deadline: timestamp, buyer: address, recipient: address, exchange_addr: address) -> uint256:\r\n    assert deadline >= block.timestamp and (tokens_bought > 0 and max_eth_sold > 0)\r\n    assert exchange_addr != self and exchange_addr != ZERO_ADDRESS\r\n    eth_bought: uint256(wei) = Exchange(exchange_addr).getEthToTokenOutputPrice(tokens_bought)\r\n    token_reserve: uint256 = self.token.balanceOf(self)\r\n    tokens_sold: uint256 = self.getOutputPrice(as_unitless_number(eth_bought), token_reserve, as_unitless_number(self.balance))\r\n    # tokens sold is always > 0\r\n    assert max_tokens_sold >= tokens_sold and max_eth_sold >= eth_bought\r\n    success: bool = self.token.transferFrom(buyer, self, tokens_sold)\r\n    assert success\r\n    eth_sold: uint256(wei) = Exchange(exchange_addr).ethToTokenTransferOutput(tokens_bought, deadline, recipient, value=eth_bought)\r\n    log.EthPurchase(buyer, tokens_sold, eth_bought)\r\n    return tokens_sold\r\n\r\n# @notice Convert Tokens (self.token) to Tokens (token_addr).\r\n# @dev User specifies maximum input and exact output.\r\n# @param tokens_bought Amount of Tokens (token_addr) bought.\r\n# @param max_tokens_sold Maximum Tokens (self.token) sold.\r\n# @param max_eth_sold Maximum ETH purchased as intermediary.\r\n# @param deadline Time after which this transaction can no longer be executed.\r\n# @param token_addr The address of the token being purchased.\r\n# @return Amount of Tokens (self.token) sold.\r\n@public\r\ndef tokenToTokenSwapOutput(tokens_bought: uint256, max_tokens_sold: uint256, max_eth_sold: uint256(wei), deadline: timestamp, token_addr: address) -> uint256:\r\n    exchange_addr: address = self.factory.getExchange(token_addr)\r\n    return self.tokenToTokenOutput(tokens_bought, max_tokens_sold, max_eth_sold, deadline, msg.sender, msg.sender, exchange_addr)\r\n\r\n# @notice Convert Tokens (self.token) to Tokens (token_addr) and transfers\r\n#         Tokens (token_addr) to recipient.\r\n# @dev User specifies maximum input and exact output.\r\n# @param tokens_bought Amount of Tokens (token_addr) bought.\r\n# @param max_tokens_sold Maximum Tokens (self.token) sold.\r\n# @param max_eth_sold Maximum ETH purchased as intermediary.\r\n# @param deadline Time after which this transaction can no longer be executed.\r\n# @param recipient The address that receives output ETH.\r\n# @param token_addr The address of the token being purchased.\r\n# @return Amount of Tokens (self.token) sold.\r\n@public\r\ndef tokenToTokenTransferOutput(tokens_bought: uint256, max_tokens_sold: uint256, max_eth_sold: uint256(wei), deadline: timestamp, recipient: address, token_addr: address) -> uint256:\r\n    exchange_addr: address = self.factory.getExchange(token_addr)\r\n    return self.tokenToTokenOutput(tokens_bought, max_tokens_sold, max_eth_sold, deadline, msg.sender, recipient, exchange_addr)\r\n\r\n# @notice Convert Tokens (self.token) to Tokens (exchange_addr.token).\r\n# @dev Allows trades through contracts that were not deployed from the same factory.\r\n# @dev User specifies exact input and minimum output.\r\n# @param tokens_sold Amount of Tokens sold.\r\n# @param min_tokens_bought Minimum Tokens (token_addr) purchased.\r\n# @param min_eth_bought Minimum ETH purchased as intermediary.\r\n# @param deadline Time after which this transaction can no longer be executed.\r\n# @param exchange_addr The address of the exchange for the token being purchased.\r\n# @return Amount of Tokens (exchange_addr.token) bought.\r\n@public\r\ndef tokenToExchangeSwapInput(tokens_sold: uint256, min_tokens_bought: uint256, min_eth_bought: uint256(wei), deadline: timestamp, exchange_addr: address) -> uint256:\r\n    return self.tokenToTokenInput(tokens_sold, min_tokens_bought, min_eth_bought, deadline, msg.sender, msg.sender, exchange_addr)\r\n\r\n# @notice Convert Tokens (self.token) to Tokens (exchange_addr.token) and transfers\r\n#         Tokens (exchange_addr.token) to recipient.\r\n# @dev Allows trades through contracts that were not deployed from the same factory.\r\n# @dev User specifies exact input and minimum output.\r\n# @param tokens_sold Amount of Tokens sold.\r\n# @param min_tokens_bought Minimum Tokens (token_addr) purchased.\r\n# @param min_eth_bought Minimum ETH purchased as intermediary.\r\n# @param deadline Time after which this transaction can no longer be executed.\r\n# @param recipient The address that receives output ETH.\r\n# @param exchange_addr The address of the exchange for the token being purchased.\r\n# @return Amount of Tokens (exchange_addr.token) bought.\r\n@public\r\ndef tokenToExchangeTransferInput(tokens_sold: uint256, min_tokens_bought: uint256, min_eth_bought: uint256(wei), deadline: timestamp, recipient: address, exchange_addr: address) -> uint256:\r\n    assert recipient != self\r\n    return self.tokenToTokenInput(tokens_sold, min_tokens_bought, min_eth_bought, deadline, msg.sender, recipient, exchange_addr)\r\n\r\n# @notice Convert Tokens (self.token) to Tokens (exchange_addr.token).\r\n# @dev Allows trades through contracts that were not deployed from the same factory.\r\n# @dev User specifies maximum input and exact output.\r\n# @param tokens_bought Amount of Tokens (token_addr) bought.\r\n# @param max_tokens_sold Maximum Tokens (self.token) sold.\r\n# @param max_eth_sold Maximum ETH purchased as intermediary.\r\n# @param deadline Time after which this transaction can no longer be executed.\r\n# @param exchange_addr The address of the exchange for the token being purchased.\r\n# @return Amount of Tokens (self.token) sold.\r\n@public\r\ndef tokenToExchangeSwapOutput(tokens_bought: uint256, max_tokens_sold: uint256, max_eth_sold: uint256(wei), deadline: timestamp, exchange_addr: address) -> uint256:\r\n    return self.tokenToTokenOutput(tokens_bought, max_tokens_sold, max_eth_sold, deadline, msg.sender, msg.sender, exchange_addr)\r\n\r\n# @notice Convert Tokens (self.token) to Tokens (exchange_addr.token) and transfers\r\n#         Tokens (exchange_addr.token) to recipient.\r\n# @dev Allows trades through contracts that were not deployed from the same factory.\r\n# @dev User specifies maximum input and exact output.\r\n# @param tokens_bought Amount of Tokens (token_addr) bought.\r\n# @param max_tokens_sold Maximum Tokens (self.token) sold.\r\n# @param max_eth_sold Maximum ETH purchased as intermediary.\r\n# @param deadline Time after which this transaction can no longer be executed.\r\n# @param recipient The address that receives output ETH.\r\n# @param token_addr The address of the token being purchased.\r\n# @return Amount of Tokens (self.token) sold.\r\n@public\r\ndef tokenToExchangeTransferOutput(tokens_bought: uint256, max_tokens_sold: uint256, max_eth_sold: uint256(wei), deadline: timestamp, recipient: address, exchange_addr: address) -> uint256:\r\n    assert recipient != self\r\n    return self.tokenToTokenOutput(tokens_bought, max_tokens_sold, max_eth_sold, deadline, msg.sender, recipient, exchange_addr)\r\n\r\n# @notice Public price function for ETH to Token trades with an exact input.\r\n# @param eth_sold Amount of ETH sold.\r\n# @return Amount of Tokens that can be bought with input ETH.\r\n@public\r\n@constant\r\ndef getEthToTokenInputPrice(eth_sold: uint256(wei)) -> uint256:\r\n    assert eth_sold > 0\r\n    token_reserve: uint256 = self.token.balanceOf(self)\r\n    return self.getInputPrice(as_unitless_number(eth_sold), as_unitless_number(self.balance), token_reserve)\r\n\r\n# @notice Public price function for ETH to Token trades with an exact output.\r\n# @param tokens_bought Amount of Tokens bought.\r\n# @return Amount of ETH needed to buy output Tokens.\r\n@public\r\n@constant\r\ndef getEthToTokenOutputPrice(tokens_bought: uint256) -> uint256(wei):\r\n    assert tokens_bought > 0\r\n    token_reserve: uint256 = self.token.balanceOf(self)\r\n    eth_sold: uint256 = self.getOutputPrice(tokens_bought, as_unitless_number(self.balance), token_reserve)\r\n    return as_wei_value(eth_sold, 'wei')\r\n\r\n# @notice Public price function for Token to ETH trades with an exact input.\r\n# @param tokens_sold Amount of Tokens sold.\r\n# @return Amount of ETH that can be bought with input Tokens.\r\n@public\r\n@constant\r\ndef getTokenToEthInputPrice(tokens_sold: uint256) -> uint256(wei):\r\n    assert tokens_sold > 0\r\n    token_reserve: uint256 = self.token.balanceOf(self)\r\n    eth_bought: uint256 = self.getInputPrice(tokens_sold, token_reserve, as_unitless_number(self.balance))\r\n    return as_wei_value(eth_bought, 'wei')\r\n\r\n# @notice Public price function for Token to ETH trades with an exact output.\r\n# @param eth_bought Amount of output ETH.\r\n# @return Amount of Tokens needed to buy output ETH.\r\n@public\r\n@constant\r\ndef getTokenToEthOutputPrice(eth_bought: uint256(wei)) -> uint256:\r\n    assert eth_bought > 0\r\n    token_reserve: uint256 = self.token.balanceOf(self)\r\n    return self.getOutputPrice(as_unitless_number(eth_bought), token_reserve, as_unitless_number(self.balance))\r\n\r\n# ERC20 compatibility for exchange liquidity modified from\r\n# https://github.com/ethereum/vyper/blob/master/examples/tokens/ERC20.vy\r\n@public\r\ndef transfer(_to: address, _value: uint256) -> bool:\r\n    self.balanceOf[msg.sender] -= _value\r\n    self.balanceOf[_to] += _value\r\n    log.Transfer(msg.sender, _to, _value)\r\n    return True\r\n\r\n@public\r\ndef transferFrom(_from: address, _to: address, _value: uint256) -> bool:\r\n    self.balanceOf[_from] -= _value\r\n    self.balanceOf[_to] += _value\r\n    if _value < MAX_UINT256:\r\n        self.allowance[_from][msg.sender] -= _value\r\n    log.Transfer(_from, _to, _value)\r\n    return True\r\n\r\n@public\r\ndef approve(_spender: address, _value: uint256) -> bool:\r\n    self.allowance[msg.sender][_spender] = _value\r\n    log.Approval(msg.sender, _spender, _value)\r\n    return True",
  "sourcePath": "C:/Users/lazypuppet/SocialStreams/contracts/uniswap_exchange.vy",
  "compiler": {
    "name": "vyper",
    "version": "0.1.0b16+commit.5e4a94a"
  },
  "networks": {},
  "schemaVersion": "3.0.23",
  "updatedAt": "2020-02-26T13:54:20.888Z"
}